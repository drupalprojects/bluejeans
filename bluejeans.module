<?php

define('BLUEJEANS_ENDPOINT', 'https://api.bluejeans.com');

/**
 * Implements hook_menu().
 */
function bluejeans_menu() {
  $items['conference/%bluejeans_node/new'] = array(
    'title' => 'Schedule conference',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bluejeans_conference_form', 1),
    'access arguments' => array('administer bluejeans conference'),
  );
  $items['conference/%bluejeans_node/%bluejeans_conference/edit'] = array(
    'title' => 'Edit conference',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bluejeans_conference_form', 1, 2),
    'access arguments' => array('administer bluejeans conference'),
  );
  $items['conference/%bluejeans_node/%bluejeans_conference/cancel'] = array(
    'title' => 'Cancel conference',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bluejeans_conference_delete', 1, 2),
    'access arguments' => array('administer bluejeans conference'),
  );
  $items['node/%bluejeans_node/conferences'] = array(
    'title' => 'Synchronize Blue Jeans',
    'page callback' => 'bluejeans_conferences_sync',
    'page arguments' => array(1),
    'access arguments' => array('administer bluejeans conference'),
    'type' => MENU_LOCAL_TASK,
  );
  $items['admin/settings/bluejeans'] = array(
    'title' => 'Blue Jeans',
    'description' => 'Adjust Blue Jeans settings.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('bluejeans_admin_settings'),
    'access arguments' => array('administer bluejeans conference'),
  );

  // BJN proxy calls.
  $items['bluejeans/conference/%bluejeans_conference/status'] = array(
    'title' => 'Get conference state',
    'page callback' => 'bluejeans_conference_status',
    'page arguments' => array(2),
    'access callback' => 'bluejeans_conference_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );
  $items['bluejeans/conference/%bluejeans_conference/endpoints'] = array(
    'title' => 'Get conference endpoints',
    'page callback' => 'bluejeans_conference_endpoints',
    'page arguments' => array(2),
    'access callback' => 'bluejeans_conference_access',
    'access arguments' => array(2),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Access function for `bluejeans/conference/%bluejeans_conference/*`.
 */
function bluejeans_conference_access($conference) {
  $nid = db_result(db_query("
    SELECT cn.nid FROM {bluejeans_conferences_nodes} cn
    LEFT JOIN {node} n ON n.nid = cn.nid
    WHERE cn.meeting_id = %d
    AND (n.tnid = 0 OR n.tnid = n.nid)
  ", $conference->meeting_id));
  $node = node_load($nid);
  return node_access('view', $node);
}

/**
 * Load function for `bluejeans_node`.
 */
function bluejeans_node_load($nid) {
  $node = node_load($nid);
  if ($node && in_array($node->type, variable_get('bluejeans_types', array()))) {
    return $node;
  }
  return FALSE;
}

/**
 * Load function for `bluejeans_conference`.
 */
function bluejeans_conference_load($meeting_id) {
  $conference = db_fetch_object(db_query("
    SELECT * FROM {bluejeans_conference} WHERE meeting_id = %d
  ", $meeting_id));
  return $conference;
}

/**
 * Menu handler for `node/%bluejeans_node/conferences`.
 */
function bluejeans_conferences_sync($node) {
  bluejeans_conferences_remote(TRUE);
  drupal_set_message(t('Synchonized conferences with Blue Jeans.'));
  drupal_goto('node/' . $node->nid);
  return '';
}

/**
 * Form function for `admin/settings/bluejeans`.
 */
function bluejeans_admin_settings() {
  $form['bluejeans_appkey'] = array(
    '#type' => 'textfield',
    '#title' => t('Blue Jeans OAuth appkey'),
    '#default_value' => variable_get('bluejeans_appkey', ''),
  );
  $form['bluejeans_appsecret'] = array(
    '#type' => 'textfield',
    '#title' => t('Blue Jeans OAuth app secret'),
    '#default_value' => variable_get('bluejeans_appsecret', ''),
  );
  $form['bluejeans_username'] = array(
    '#type' => 'textfield',
    '#title' => t('Blue Jeans username'),
    '#default_value' => variable_get('bluejeans_username', ''),
  );
  $form['bluejeans_types'] = array(
    '#type' => 'select',
    '#title' => t('Associated content types'),
    '#multiple' => TRUE,
    '#options' => node_get_types('names'),
    '#default_value' => variable_get('bluejeans_types', array()),
  );
  return system_settings_form($form);
}

/**
 * Form function for `bluejeans_conference_delete`.
 */
function bluejeans_conference_delete(&$form_state, $node, $conference) {
  $form['#conference'] = $conference;
  $form = confirm_form(
    $form,
    t('Are you sure you want to cancel the conference %title?', array('%title' => $conference->title)),
    'node/' . $conference->nid,
    t('The conference will be canceled. This action cannot be undone.'),
    t('Submit')
  );
  return $form;
}

/**
 * Form submit function for `bluejeans_conference_delete`.
 */
function bluejeans_conference_delete_submit($form, &$form_state) {
  if ($form_state['values']['confirm']) {
    $conference = $form['#conference'];

    if (!bluejeans_authenticate()) {
      // TODO inform user of failure
      return;
    }

    // Cancel remote meeting.
    $response = drupal_http_request(
      url(BLUEJEANS_ENDPOINT . '/v1/user/' . $_SESSION['bluejeans']->user->id . '/scheduled_meeting/' . $conference->meeting_id,
          array('absolute' => TRUE, 'query' => array(
            'access_token' => $_SESSION['bluejeans']->access_token,
          ))
      ),
      array(),
      'DELETE'
    );
    if ($response->code != 200) {
      // TODO watchdog response error
      // TODO inform user of failure
      return;
    }

    // Delete local copy.
    db_query("
      DELETE FROM {bluejeans_conferences_nodes} WHERE meeting_id = %d
    ", $conference->meeting_id);
    db_query("
      DELETE FROM {bluejeans_conference} WHERE meeting_id = %d
    ", $conference->meeting_id);

    // Inform other modules we've deleted a conference.
    module_invoke_all('bluejeans_conference', 'delete', $conference);

    // Inform user.
    drupal_set_message(t('Canceled conference %title.', array('%title' => $conference->title)));
  }
}

/**
 * Form function for `bluejeans_conference_form`.
 */
function bluejeans_conference_form(&$form_state, $node, $conference = NULL) {
  $form['title'] = array(
    '#title' => t('Title'),
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => isset($conference) ? $conference->title : NULL,
  );
  $format = 'm/d/Y - h:iA';
  $form['start'] = array(
    '#title' => t('Start'),
    '#type' => 'date_popup',
    '#date_format' => $format,
    '#required' => TRUE,
    '#attributes' => array('autocomplete' => 'off'),
    '#default_value' => isset($conference) ? date(DATE_FORMAT_DATETIME, $conference->start) : NULL,
    '#field_suffix' => _bluejeans_timezone_abbreviation(date_default_timezone_name()),
  );
  $form['end'] = array(
    '#title' => t('End'),
    '#type' => 'date_popup',
    '#date_format' => $format,
    '#required' => TRUE,
    '#attributes' => array('autocomplete' => 'off'),
    '#default_value' => isset($conference) ? date(DATE_FORMAT_DATETIME, $conference->end) : NULL,
    '#field_suffix' => _bluejeans_timezone_abbreviation(date_default_timezone_name()),
  );
  $form['description'] = array(
    '#title' => t('Message'),
    '#type' => 'textarea',
    '#description' => t('A greeting or description about your meeting.'),
    '#default_value' => isset($conference) ? $conference->description : NULL,
  );
  $form['submit'] = array(
    '#value' => t('Save'),
    '#type' => 'submit',
  );
  $form['cancel'] = array(
    '#type' => 'markup',
    '#value' => l(t('Cancel'), 'node/' . $node->nid),
  );
  $form['#node'] = $node;
  $form['#conference'] = $conference;
  return $form;
}

/**
 * Form validation function for `bluejeans_conference_form`.
 */
function bluejeans_conference_form_validate($form, $form_state) {
  $start = strtotime($form_state['values']['start']);
  $end = strtotime($form_state['values']['end']);
  if ($start < time()) {
    form_set_error('start', t('Conference start time should be in the future.'));
  }
  if ($end <= $start) {
    form_set_error('end', t('Conference end time should be greater than start time.'));
  }
}

/**
 * Form submit function for `bluejeans_conference_form`.
 */
function bluejeans_conference_form_submit($form, $form_state) {
  if (!bluejeans_authenticate()) {
    // TODO inform user of failure
    return;
  }

  $updating_meeting_id = isset($form['#conference']) ? $form['#conference']->meeting_id : NULL;

  // Create remote meeting.
  $conference = (object)array(
    'title' => $form_state['values']['title'],
    'start' => strtotime($form_state['values']['start']) * 1000, // in ms
    'end' => strtotime($form_state['values']['end']) * 1000, // in ms
    'description' => $form_state['values']['description'],
    'timezone' => date_default_timezone_name(),
    'endPointType' => 'Drupal Blue Jeans',
    'endPointVersion' => '1.0',
  );
  $response = drupal_http_request(
    url(BLUEJEANS_ENDPOINT . '/v1/user/' . $_SESSION['bluejeans']->user->id . '/scheduled_meeting' . (isset($updating_meeting_id) ? '/' . $updating_meeting_id : ''),
        array('absolute' => TRUE, 'query' => array(
          'access_token' => $_SESSION['bluejeans']->access_token,
        ))
    ),
    array('Content-Type' => 'application/json'),
    isset($updating_meeting_id) ? 'PUT' : 'POST',
    json_encode($conference)
  );
  if ($response->code >= 300) { 
    form_set_error('', t('BlueJeans error: !error', array('!error' => $response->data)));
    return;
  }
  $meeting_id = json_decode($response->data);
  $conference->meeting_id = empty($meeting_id) ? $updating_meeting_id : $meeting_id->id;

  // Read the conference again for full metadata :-(
  $response = drupal_http_request(
    url(BLUEJEANS_ENDPOINT . '/v1/user/' . $_SESSION['bluejeans']->user->id . '/scheduled_meeting/' . $conference->meeting_id,
        array('absolute' => TRUE, 'query' => array('access_token' => $_SESSION['bluejeans']->access_token
        ))
  ));
  if ($response->code != 200) {
    // TODO watchdog response error
  }
  $conference->metadata = $response->data;

  // Save meeting locally.
  $conference->start = strtotime($form_state['values']['start']);
  $conference->end = strtotime($form_state['values']['end']);
  $result = drupal_write_record('bluejeans_conference', $conference, $updating_meeting_id ? array('meeting_id') : array());
  if (!$updating_meeting_id) {
    $conference->nid = $form['#node']->nid;
    drupal_write_record('bluejeans_conferences_nodes', $conference);
  }

  // Inform other modules we've scheduled a conference.
  module_invoke_all('bluejeans_conference', $updating_meeting_id ? 'update' : 'insert', $conference);

  // Inform user of success.
  if ($updating_meeting_id) {
    drupal_set_message(t('Updated conference %title.', array('%title' => $conference->title)));
  }
  else {
    drupal_set_message(t('Scheduled conference %title.', array('%title' => $conference->title)));
  }
}

/**
 * Implementation of hook_bluejeans_conference().
 */
function bluejeans_bluejeans_conference($op, $conference) {
  if ($op == 'insert' && module_exists('translation')) {
    // Insert same conference for translated nodes.
    $node = node_load($conference->nid);
    if (!empty($node->tnid)) foreach (translation_node_get_translations($node->tnid) as $translation) {
      if ($translation->nid != $conference->nid) {
        $translation->meeting_id = $conference->meeting_id;
        drupal_write_record('bluejeans_conferences_nodes', $translation);
      }
    }
  }
}

/**
 * Implements hook_theme().
 */
function bluejeans_theme() {
  return array(
    'bluejeans_conferences' => array(
      'arguments' => array('conferences' => array(), 'node' => NULL),
    ),
    'bluejeans_conferences_teaser' => array(
      'arguments' => array('conferences' => array(), 'node' => NULL),
    ),
    'bluejeans_conference' => array(
      'arguments' => array('conference' => NULL, 'node' => NULL),
      'template' => 'conference',
    ),
    'bluejeans_create_conference_link' => array(
      'arguments' => array('node' => NULL),
    ),
  );
}

/**
 * Theme function for `bluejeans_conferences`.
 */
function theme_bluejeans_conferences($conferences, $node) {
  $output = '';
  if (!empty($conferences)) {
    if (!bluejeans_authenticate()) {
      // TODO display user error
    }
    global $user;
    global $language;
    $account = $user;
    $account->is_conference_owner = user_access('administer bluejeans conference');
    drupal_add_js(drupal_get_path('module', 'bluejeans') . '/bluejeans.js');
    drupal_add_js(array('BlueJeans' => array(
      'user' => $account,
      'session' => $_SESSION['bluejeans'],
      'basePathLocalized' => rtrim(url('<front>', array('language' => $language)), '/') . '/',
    )), 'setting');
    foreach ($conferences as $conference) {
      $items[] = theme('bluejeans_conference', $conference, $node);
    }
    $output = theme('item_list', $items);
  }
  return $output;
}

/**
 * Theme function for `bluejeans_create_conference_link`.
 */
function theme_bluejeans_create_conference_link($node) {
  $create_conference = '';
  if (user_access('administer bluejeans conference')) {
    $create_conference = l(t('Schedule new conference'),
      'conference/' . $node->nid . '/new',
      array('query' => array('destination' => $_GET['q']))
    );
  }
  return $create_conference;
}

/**
 * Theme function for `bluejeans_conferences_teaser`.
 */
function theme_bluejeans_conferences_teaser($conferences, $node) {
  return format_plural(count($conferences),
    'There is 1 conference scheduled in this !type for today. !join',
    'There are @count conferences scheduled in this !type for today. !join',
    array(
      '!join' => l(t('Click here to join.'), 'node/' . $node->nid),
      '!type' => t($node->type),
    )
  );
}

/**
 * Theme preprocessor for `bluejeans_conference`.
 */
function bluejeans_preprocess_bluejeans_conference(&$vars) {
  $conference = $vars['conference'];
  $node = $vars['node'];
  $conference->nid = $node->nid; // make sure JavaScript has the nid of the current node
  $node = node_load($conference->nid);
  $vars['title'] = $conference->title;
  $vars['description'] = $conference->description;
  $vars['classes'][] = 'bluejeans-conference';
  $vars['start_date'] = format_date($conference->start, 'custom', 'j M');
  $vars['start_time'] = format_date($conference->start, 'custom', 'h:iA') . ' ' . _bluejeans_timezone_abbreviation(date_default_timezone_name());
  $vars['duration'] = format_interval($conference->end - $conference->start);
  drupal_add_js(array('BlueJeans' => array('meetings' => array(
    // For some reason, array_merge_recursive() doesn't honour numeric keys.
    // So we add the 'key.' prefix here to convert the ID to a string.
    // We'll do the same on the JavaScript side when reading the array.
    'key.' . $conference->meeting_id => $conference,
  ))), 'setting');
}

/**
 * Get the timezone's abbreviation.
 */
function _bluejeans_timezone_abbreviation($timezone_name) {
  $dateTime = new DateTime();
  $dateTime->setTimeZone(new DateTimeZone($timezone_name));
  return $dateTime->format('T'); 
}

/**
 * Implements hook_nodeapi().
 */
function bluejeans_nodeapi(&$node, $op, $a3 = NULL, $a4 = NULL) {
  if ($op == 'view' && in_array($node->type, variable_get('bluejeans_types', array()))) {
    if (empty($a3)) { // full mode
      $conferences = bluejeans_node_conferences_local($node);
      $node->content['conferences'] = array(
        '#value' => theme('bluejeans_conferences', $conferences, $node),
      );
      $node->content['create_conference_link'] = array(
        '#value' => theme('bluejeans_create_conference_link', $node),
      );
    }
    else { // teaser mode - show message for upcoming conference today
      $conferences = bluejeans_node_conferences_local($node, TRUE);
      if (!empty($conferences)) {
        $node->content['conferences'] = array(
          '#value' => theme('bluejeans_conferences_teaser', $conferences, $node),
          '#weight' => -100,
        );
      }
    }
  }
  else if ($op == 'delete' && in_array($node->type, variable_get('bluejeans_types', array()))) {
    // TODO delete associated meetings here and on BJN.
  }

  // TODO: Synchronize conferences to node mappings when translations are created.
}

/**
 * Authenticate with BlueJeans service.
 */
function bluejeans_authenticate($force = FALSE) {
  // Check expiration time before requesting new token.
  if (empty($force) &&
      !empty($_SESSION['bluejeans']->access_token) &&
      !empty($_SESSION['bluejeans']->expires_at) &&
      $_SESSION['bluejeans']->expires_at > time()
  ) {
    return TRUE;
  }

  // Get group admin access token.
  $response = drupal_http_request(
    BLUEJEANS_ENDPOINT . '/oauth2/token',
    array(),
    'POST',
    json_encode(array(
      'grant_type' => 'client_credentials',
      'client_id' => variable_get('bluejeans_appkey', ''),
      'client_secret' => variable_get('bluejeans_appsecret', ''),
    ))
  );
  if ($response->code != 200) {
    unset($_SESSION['bluejeans']);
    // TODO watchdog response error
    return FALSE;
  }
  $_SESSION['bluejeans'] = json_decode($response->data);
  $_SESSION['bluejeans']->expires_at = time() + $_SESSION['bluejeans']->expires_in;

  // Get main user ID.
  $response = drupal_http_request(
    url(BLUEJEANS_ENDPOINT . '/v1/enterprise/' . $_SESSION['bluejeans']->scope->enterprise . '/users',
        array('absolute' => TRUE, 'query' => array(
          'access_token' => $_SESSION['bluejeans']->access_token,
        ))
  ));
  if ($response->code != 200) {
    unset($_SESSION['bluejeans']);
    // TODO watchdog response error
    return FALSE;
  }
  $users = json_decode($response->data);
  if (empty($users->count)) {
    unset($_SESSION['bluejeans']);
    // TODO watchdog user not found
    return FALSE;
  }
  foreach($users->users as $user) {
    $response = drupal_http_request(
      url(BLUEJEANS_ENDPOINT . '/v1/user/' . $user->id,
        array('absolute' => TRUE, 'query' => array('access_token' => $_SESSION['bluejeans']->access_token
      ))
    ));
    if ($response->code == 200) {
      $user = json_decode($response->data);
      // Search for configured username.
      if ($user->username == variable_get('bluejeans_username', '')) {
        $_SESSION['bluejeans']->user = $user;
        break;
      }
    }
  }
  if (empty($_SESSION['bluejeans']->user)) {
    unset($_SESSION['bluejeans']);
    // TODO watchdog user not found
    return FALSE; 
  }
  
  // Get user's room details.
  $response = drupal_http_request(
    url(BLUEJEANS_ENDPOINT . '/v1/user/' . $_SESSION['bluejeans']->user->id . '/room',
        array('absolute' => TRUE, 'query' => array('access_token' => $_SESSION['bluejeans']->access_token
        ))
  ));
  if ($response->code != 200) {
    // TODO watchdog response error
  }
  $_SESSION['bluejeans']->user->room = json_decode($response->data);

  return TRUE;
}

/**
 * Get list of all conferences from BlueJeans service.
 */
function bluejeans_conferences_remote($sync = FALSE) {
  if (!bluejeans_authenticate()) {
    return array();
  }

  $response = drupal_http_request(
    url(BLUEJEANS_ENDPOINT . '/v1/user/' . $_SESSION['bluejeans']->user->id . '/scheduled_meeting',
        array('absolute' => TRUE, 'query' => array('access_token' => $_SESSION['bluejeans']->access_token
        ))
  ));
  if ($response->code != 200) {
    // TODO watchdog response error
  }
  $conferences = json_decode($response->data);

  // Sync with local data if needed.
  if ($sync) foreach ($conferences as $conference) {
    $c = (object)array(
      'meeting_id' => $conference->id,
      'title' => $conference->title,
      'description' => $conference->description,
      'start' => $conference->start / 1000, // in sec
      'end' => $conference->end / 1000, // in sec
      'metadata' => json_encode($conference),
    );
    // Only update existing records.
    $result = drupal_write_record('bluejeans_conference', $c, 'meeting_id');
  }

  return $conferences;
}

/**
 * Get list of conferences related to given node from local database.
 *
 * @param object $node
 *   Node object
 * @param bool $today
 *   (optional) Flag to only return today's active conferences
 * @return array
*    Array of conference objects associated with given node, can be empty
 */
function bluejeans_node_conferences_local($node, $today = FALSE) {
  $clause = '';
  if ($today) {
    $clause = "AND DATE(FROM_UNIXTIME(c.start)) = CURDATE() AND c.end > UNIX_TIMESTAMP()";
  }
  $result = db_query("
    SELECT * FROM {bluejeans_conference} c
    LEFT JOIN {bluejeans_conferences_nodes} cn ON c.meeting_id = cn.meeting_id
    WHERE cn.nid = %d $clause ORDER BY c.start DESC
  ", $node->nid);
  $conferences = array();
  while ($conference = db_fetch_object($result)) {
    $conferences[] = $conference;
  }
  return $conferences;
}

/**
 * Get conference status from BlueJeans service.
 */
function bluejeans_conference_status($conference) {
  drupal_set_header('Content-Type: application/json');

  if (!bluejeans_authenticate()) {
    // TODO return JSON error
    exit;
  }

  // Get meeting state.
  $metadata = json_decode($conference->metadata);
  $response = drupal_http_request(
    url(BLUEJEANS_ENDPOINT . '/v1/user/' . $_SESSION['bluejeans']->user->id . '/live_meetings/' . $metadata->numericMeetingId,
        array('absolute' => TRUE, 'query' => array('access_token' => $_SESSION['bluejeans']->access_token
        ))
  ));
  if ($response->code != 200) {
    if ($response->code == 404) {
      // 404 means meeting not live.
      drupal_json((object)array('status' => 'inactive'));
      exit;
    }
    else {
      // TODO watchdog response error
      // TODO return JSON error
      exit;
    }
  }
  drupal_json(json_decode($response->data)); // response arrives already JSON-encoded
  exit;
}

/**
 * Get conference endpoints from BlueJeans service.
 */
function bluejeans_conference_endpoints($conference) {
  drupal_set_header('Content-Type: application/json');

  if (!bluejeans_authenticate()) {
    // TODO return JSON error
    exit;
  }

  // Get meeting endpoints.
  $metadata = json_decode($conference->metadata);
  $response = drupal_http_request(
    url(BLUEJEANS_ENDPOINT . '/v1/user/' . $_SESSION['bluejeans']->user->id . '/live_meetings/' . $metadata->numericMeetingId . '/endpoints',
        array('absolute' => TRUE, 'query' => array('access_token' => $_SESSION['bluejeans']->access_token
        ))
  ));
  if ($response->code != 200) {
    // TODO watchdog response error
    // TODO return JSON error
    exit;
  }
  drupal_json(json_decode($response->data)); // response arrives already JSON-encoded
  exit;
}

/**
 * Implements of hook_perm()
 */
function bluejeans_perm() {
  return array('administer bluejeans conference');
}
